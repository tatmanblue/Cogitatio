@page "/feed.rss"
@using System.Xml
@using Cogitatio.Interfaces
@using Cogitatio.Models
@inject IHttpContextAccessor HttpContextAccessor
@inject IDatabase database

@functions {
    private async Task GenerateRss()
    {
        HttpContextAccessor.HttpContext.Response.ContentType = "application/rss+xml";

        var recentPosts = GetRecentPosts();
        
        using var writer = XmlWriter.Create(HttpContextAccessor.HttpContext.Response.Body, new XmlWriterSettings { Indent = true });

        await writer.WriteStartElementAsync("", "rss", "");
        await writer.WriteAttributeStringAsync("", "version", "", "2.0");

        // Start <channel> element
        await writer.WriteStartElementAsync("", "channel", "");

        // Add channel elements
        await writer.WriteElementStringAsync("", "title", "", "Unconventional Bits");
        await writer.WriteElementStringAsync("", "link", "", "http://blog.tatmanblue.com");
        await writer.WriteElementStringAsync("", "description", "", "Digital thoughts from a seasoned programmer");
        await writer.WriteElementStringAsync("", "language", "", "en-us");

        foreach (var post in recentPosts)
        {
            await writer.WriteStartElementAsync("", "item", "");
            await writer.WriteElementStringAsync("", "title", "", post.Title);
            await writer.WriteElementStringAsync("","link", "", $"http://blog.tatmanblue.com/post/{post.Slug}");
            await writer.WriteElementStringAsync("","pubDate", "", post.PublishedDate.ToString("R")); // RFC1123 format
            string shortDesc = GetShortenedContent(post);
            await writer.WriteElementStringAsync("","description", "", System.Security.SecurityElement.Escape(shortDesc));

            /*
            writer.WriteStartElement("content:encoded");
            writer.WriteCData($"<p>{shortDesc}</p>");

            writer.WriteEndElement();
            */
            await writer.WriteEndElementAsync(); // close item
        }

        await writer.WriteEndElementAsync(); // Close <channel>
        await writer.WriteEndElementAsync(); // Close <rss>
    }
}

@code {
    
    private string GetShortenedContent(BlogPost post)
    {
        if (250 > post.Content.Length)
            return post.Content;
        
        return post.Content.Substring(0, 250);
    }

    protected List<BlogPost> GetRecentPosts()
    {
        return database.GetPostsForRSS();
    }
    
    protected override Task OnInitializedAsync()
    {
        GenerateRss();
        return Task.CompletedTask;
    }
}