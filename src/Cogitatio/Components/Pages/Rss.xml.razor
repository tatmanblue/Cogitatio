@page "/rss.xml"
@using System.Xml
@using Cogitatio.Interfaces
@using Cogitatio.Models
@inject IHttpContextAccessor HttpContextAccessor
@inject IDatabase database
@inject ILogger<Program> logger

@functions {
    private void GenerateRss()
    {
        logger.LogCritical("GenerateRss()");
        try
        {
            HttpContextAccessor.HttpContext.Response.ContentType = "application/rss+xml";

            var recentPosts = GetRecentPosts();
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Async = false;
            settings.Indent = true;

            using var writer = XmlWriter.Create(HttpContextAccessor.HttpContext.Response.Body, settings);
            
            writer.WriteStartElement("", "rss", "");
            writer.WriteAttributeString("", "version", "", "2.0");

            // Start <channel> element
            writer.WriteStartElement("", "channel", "");

            // Add channel elements
            writer.WriteElementString("", "title", "", "Unconventional Bits");
            writer.WriteElementString("", "link", "", "http://blog.tatmanblue.com");
            writer.WriteElementString("", "description", "", "Digital thoughts from a seasoned programmer");
            writer.WriteElementString("", "language", "", "en-us");

            logger.LogCritical("Completed RSS");

            HttpContextAccessor.HttpContext.Response.Body.Flush();
            
            logger.LogCritical("Completed RSS flush");
            
        }
        catch (Exception ex)
        {
            logger.LogCritical($"Exception: {ex.Message} {ex.StackTrace}");
        }
    }

    private async Task GenerateRssAsync()
    {
        logger.LogCritical("GenerateRssAsync()");
        try
        {
           
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Async = true;
            settings.Indent = true;

            await using var writer = XmlWriter.Create(HttpContextAccessor.HttpContext.Response.Body, settings);
            
            await writer.WriteStartElementAsync("", "rss", "");
            await writer.WriteAttributeStringAsync("", "version", "", "2.0");
            
            await writer.WriteStartElementAsync("", "channel", "");
            
            await writer.WriteElementStringAsync("", "title", "", "Unconventional Bits");
            await writer.WriteElementStringAsync("", "link", "", "http://blog.tatmanblue.com");
            await writer.WriteElementStringAsync("", "description", "", "Digital thoughts from a seasoned programmer");
            await writer.WriteElementStringAsync("", "language", "", "en-us");

            var recentPosts = GetRecentPosts();
            foreach (var post in recentPosts)
            {
                await writer.WriteStartElementAsync("", "item", "");
                await writer.WriteElementStringAsync("", "title", "", post.Title);
                await writer.WriteElementStringAsync("", "link", "", $"http://blog.tatmanblue.com/post/{post.Slug}");
                await writer.WriteElementStringAsync("", "pubDate", "", post.PublishedDate.ToString("R")); // RFC1123 format
                string shortDesc = GetShortenedContent(post);
                await writer.WriteElementStringAsync("", "description", "", System.Security.SecurityElement.Escape(shortDesc));

                await writer.WriteEndElementAsync(); // close item
            }
            
            await writer.WriteEndElementAsync(); // Close <channel>
            await writer.WriteEndElementAsync(); // Close <rss>

            HttpContextAccessor.HttpContext.Response.ContentType = "application/rss+xml";
            await HttpContextAccessor.HttpContext.Response.Body.FlushAsync();
           
            logger.LogCritical("Completed RSS flush");
            
        }
        catch (Exception ex)
        {
            logger.LogCritical($"Exception: {ex.Message} {ex.StackTrace}");
        }
    }

    }
}

@code {
    
    private string GetShortenedContent(BlogPost post)
    {
        if (250 > post.Content.Length)
            return post.Content;
        
        return post.Content.Substring(0, 250);
    }

    protected List<BlogPost> GetRecentPosts()
    {
        return database.GetPostsForRSS();
    }
    
    protected override Task OnInitializedAsync()
    {
        Task something = GenerateRssAsync();
        return Task.CompletedTask;
    }
}